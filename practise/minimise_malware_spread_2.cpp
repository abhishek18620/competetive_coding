// https://leetcode.com/problems/minimize-malware-spread-ii/
#include <algorithm>
#include <iostream>
#include <stack>
#include <string>
#include <unordered_set>
#include <vector>

static void SpreadMalwareFromVertex(
    const int src, const std::vector<std::vector<int>>& graph,
    const std::vector<bool>& infected_mask,
    std::vector<int>&        vertices_infected_from_src,
    /*denotes how many times vertex gets infected */
    std::vector<int>& infected_cnt, std::vector<bool>& visited) {
    std::stack<int> dfs_st;
    dfs_st.push(src);
    while (!dfs_st.empty()) {
        int u = dfs_st.top();
        dfs_st.pop();
        visited[u] = true;
        for (int i = 0; i < graph.size(); ++i) {
            if (graph[u][i] && !infected_mask[i] && !visited[i]) {
                vertices_infected_from_src.push_back(i);
                infected_cnt[i]++;
                dfs_st.push(i);
            }
        }
    }

    return;
}

int Solve(const std::vector<std::vector<int>>& graph,
          std::vector<int>&                    initial) {
    const int N = graph.size();
    // sanity check
    if (initial.size() == N) {
        return 0;
    }
    std::sort(initial.begin(), initial.end());
    std::vector<bool>             infected_mask(N);
    std::vector<bool>             visited(N, false);
    std::vector<std::vector<int>> vertices_infected_list(N);
    std::vector<int>              infected_cnt(N, 0);
    int                           culprit_vertex = -1;
    int                           max_infected   = -1;
    for (auto ele : initial) {
        infected_mask[ele] = true;
    }

    for (auto src : initial) {
        SpreadMalwareFromVertex(src, graph, infected_mask,
                                vertices_infected_list[src], infected_cnt,
                                visited);
        std::fill(visited.begin(), visited.end(), false);
    }

    // calculate culprit
    for (auto src : initial) {
        int num_infected = 0;
        printf("src %d infects : ", src);
        for (auto vertex : vertices_infected_list[src]) {
            printf("%d ", vertex);
            if (infected_cnt[vertex] < 2) {
                num_infected++;
            }
        }
        printf("\n");
        if (max_infected < num_infected) {
            max_infected   = num_infected;
            culprit_vertex = src;
        }
    }

    return culprit_vertex == -1 ? initial[0] : culprit_vertex;
}

int main() {
#ifdef DEBUG
    freopen("input.txt", "rt", stdin);
#endif
    int N, M;
    scanf("%d %d", &N, &M);
    printf("%s: N = %d\n", __func__, N);
    std::vector<std::vector<int>> graph(N, std::vector<int>(N));
    std::vector<int>              initial(M);
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            scanf("%d", &graph[i][j]);
        }
    }
    for (auto& ele : initial) {
        scanf("%d", &ele);
    }

    printf("%s: solution = %d\n", __func__, Solve(graph, initial));
    return 0;
}

